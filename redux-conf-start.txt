https://codesandbox.io/s/sleepy-curran-l8bii4?file=/src/App.js

za napraviti cookie language options za user - https://www.youtube.com/watch?v=w04LXKlusCQ&ab_channel=Classsed

video za protected routes - https://www.youtube.com/watch?v=oUZjO00NkhY&t=121s&ab_channel=DaveGray

RTK Query dobar tutorial - https://www.youtube.com/watch?v=YWbZILe35P4&ab_channel=DipeshMalvia --> pogledaj ostale isto


ovo je za datume - https://www.youtube.com/watch?v=tgcCl52EN84&ab_channel=CooperCodes
database design: 

CREATE TABLE apartments (
  id SERIAL PRIMARY KEY,
  title TEXT NOT NULL,
  room_numbers INTEGER NOT NULL,
  city TEXT NOT NULL
);

CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email TEXT NOT NULL UNIQUE,
  password TEXT NOT NULL
);

CREATE TABLE reservations (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  apartment_id INTEGER REFERENCES apartments(id),
  reservation_date TIMESTAMP NOT NULL
);

CREATE TABLE ratings (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  apartment_id INTEGER REFERENCES apartments(id),
  rating INTEGER NOT NULL,
  comment TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT now()
);

- kada se spremaju datumi u supabase, uvijek pretvori Date() objekt u ISOString(), jer to je format koji supabase prima

- pogledaj ovaj api za storage upload za slike - https://supabase.com/docs/reference/javascript/v1/storage-createbucket

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// using memoized selectors for filtering and sorting? e.g: 
Sure, here's an example of how you can create memoized selectors using the createSelector function from the reselect library:

import { createSelector } from 'reselect';

// A selector that returns the users slice of the state
const getUsers = state => state.users;

// A memoized selector that returns the list of active users
const getActiveUsers = createSelector(
  getUsers,
  users => users.filter(user => user.isActive)
);
In the above example, we define a basic selector getUsers that returns the users slice of 
the Redux state object. We then define a memoized selector getActiveUsers using createSelector, 
which takes two arguments: the first argument is an array of input selectors, and the second 
argument is a function that takes the output of those selectors and returns the derived data.
In this case, the getActiveUsers selector takes the output of the getUsers selector and filters 
the list of users to return only those that have isActive set to true. The result of this selector
 is memoized, meaning that it will only be recomputed when the input selector (getUsers) changes.
Memoized selectors can help to optimize performance by avoiding unnecessary recomputations of
 derived data when the input data hasn't changed. They can also help to simplify your code by 
 encapsulating the logic for deriving data from the Redux state object.


 ///////////////////////////////////////////FOR THE RESERVATIONS //////////////////
 Filter Reservations: Filtering reservations based on various criteria such as reservation date, client name, or reservation status (confirmed, pending, cancelled) can make it easier to find specific reservations and manage them more efficiently.

Sort Reservations: Sorting reservations by various criteria such as reservation date, client name, or reservation status can make it easier to organize reservations and prioritize which ones to manage first.

Pagination: If there are a large number of reservations, consider implementing pagination to limit the number of reservations displayed on each page, and make it easier to navigate through them.

Search Functionality: Adding a search functionality to search reservations by client name, reservation date or other relevant information can make it easier to find specific reservations quickly.

Reservation Details: Being able to view detailed information about each reservation can help manage reservations more efficiently. Include details such as the client name, reservation date, reservation status, number of guests, and any special requests or notes associated with the reservation.

Edit and Delete Functionality: As an admin, you may need to edit or delete reservations. Consider adding functionality to allow you to modify or delete reservations easily.

to do: add readme doc, solve the reservations problem and issue when user clicks the apartment that 
wants to reserve, the app does not get id for selected apartment, add refresh token with each signin 